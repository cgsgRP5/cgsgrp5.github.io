!function(t){"use strict";class s{canvas;id;gl;constructor(t){this.id=t,this.canvas=document.getElementById(t),null!=this.canvas?(this.gl=this.canvas.getContext("webgl2"),this.gl.cullFace(this.gl.FRONT_AND_BACK),this.gl.enable(this.gl.DEPTH_TEST)):this.gl=null}}class i{m=[[],[],[],[]];constructor(...t){this.set(...t)}set(){return this.m=1===arguments.length?new[arguments[0],arguments[1],arguments[2],arguments[3]]:4===arguments.length?[arguments[0],arguments[1],arguments[2],arguments[3]]:16==arguments.length?[[arguments[0],arguments[1],arguments[2],arguments[3]],[arguments[4],arguments[5],arguments[6],arguments[7]],[arguments[8],arguments[9],arguments[10],arguments[11]],[arguments[12],arguments[13],arguments[14],arguments[15]]]:this.identity(),this}identity(){return this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}view(t,s,i){const e=m(s).sub(t).norm(),r=m(e).cross(i).norm(),h=m(r).cross(e).norm();this.set([r.x,h.x,-e.x,0],[r.y,h.y,-e.y,0],[r.z,h.z,-e.z,0],[-t.dot(r),-t.dot(h),t.dot(e),1])}translate(t){this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]]}scale(t){this.m=[[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]]}mul(t){return 0==arguments.length&&(this.m=[[this.m[0][0]*t[0][0]+this.m[0][1]*t[1][0]+this.m[0][2]*t[2][0]+this.m[0][3]*t[3][0],this.m[0][0]*t[0][1]+this.m[0][1]*t[1][1]+this.m[0][2]*t[2][1]+this.m[0][3]*t[3][1],this.m[0][0]*t[0][2]+this.m[0][1]*t[1][2]+this.m[0][2]*t[2][2]+this.m[0][3]*t[3][2],this.m[0][0]*t[0][3]+this.m[0][1]*t[1][3]+this.m[0][2]*t[2][3]+this.m[0][3]*t[3][3]],[this.m[1][0]*t[0][0]+this.m[1][1]*t[1][0]+this.m[1][2]*t[2][0]+this.m[1][3]*t[3][0],this.m[1][0]*t[0][1]+this.m[1][1]*t[1][1]+this.m[1][2]*t[2][1]+this.m[1][3]*t[3][1],this.m[1][0]*t[0][2]+this.m[1][1]*t[1][2]+this.m[1][2]*t[2][2]+this.m[1][3]*t[3][2],this.m[1][0]*t[0][3]+this.m[1][1]*t[1][3]+this.m[1][2]*t[2][3]+this.m[1][3]*t[3][3]],[this.m[2][0]*t[0][0]+this.m[2][1]*t[1][0]+this.m[2][2]*t[2][0]+this.m[2][3]*t[3][0],this.m[2][0]*t[0][1]+this.m[2][1]*t[1][1]+this.m[2][2]*t[2][1]+this.m[2][3]*t[3][1],this.m[2][0]*t[0][2]+this.m[2][1]*t[1][2]+this.m[2][2]*t[2][2]+this.m[2][3]*t[3][2],this.m[2][0]*t[0][3]+this.m[2][1]*t[1][3]+this.m[2][2]*t[2][3]+this.m[2][3]*t[3][3]],[this.m[3][0]*t[0][0]+this.m[3][1]*t[1][0]+this.m[3][2]*t[2][0]+this.m[3][3]*t[3][0],this.m[3][0]*t[0][1]+this.m[3][1]*t[1][1]+this.m[3][2]*t[2][1]+this.m[3][3]*t[3][1],this.m[3][0]*t[0][2]+this.m[3][1]*t[1][2]+this.m[3][2]*t[2][2]+this.m[3][3]*t[3][2],this.m[3][0]*t[0][3]+this.m[3][1]*t[1][3]+this.m[3][2]*t[2][3]+this.m[3][3]*t[3][3]]]),this}frustum(t,s,i,e,r,m){return this.m=[[2*r/(s-t),0,0,0],[0,2*r/(e-i),0,0],[(s+t)/(s-t),(e+i)/(e-i),-(m+r)/(m-r),-1],[0,0,-2*r*m/(m-r),0]],this}matrMulmatr(t,s){return this.m=[[t.m[0][0]*s.m[0][0]+t.m[0][1]*s.m[1][0]+t.m[0][2]*s.m[2][0]+t.m[0][3]*s.m[3][0],t.m[0][0]*s.m[0][1]+t.m[0][1]*s.m[1][1]+t.m[0][2]*s.m[2][1]+t.m[0][3]*s.m[3][1],t.m[0][0]*s.m[0][2]+t.m[0][1]*s.m[1][2]+t.m[0][2]*s.m[2][2]+t.m[0][3]*s.m[3][2],t.m[0][0]*s.m[0][3]+t.m[0][1]*s.m[1][3]+t.m[0][2]*s.m[2][3]+t.m[0][3]*s.m[3][3]],[t.m[1][0]*s.m[0][0]+t.m[1][1]*s.m[1][0]+t.m[1][2]*s.m[2][0]+t.m[1][3]*s.m[3][0],t.m[1][0]*s.m[0][1]+t.m[1][1]*s.m[1][1]+t.m[1][2]*s.m[2][1]+t.m[1][3]*s.m[3][1],t.m[1][0]*s.m[0][2]+t.m[1][1]*s.m[1][2]+t.m[1][2]*s.m[2][2]+t.m[1][3]*s.m[3][2],t.m[1][0]*s.m[0][3]+t.m[1][1]*s.m[1][3]+t.m[1][2]*s.m[2][3]+t.m[1][3]*s.m[3][3]],[t.m[2][0]*s.m[0][0]+t.m[2][1]*s.m[1][0]+t.m[2][2]*s.m[2][0]+t.m[2][3]*s.m[3][0],t.m[2][0]*s.m[0][1]+t.m[2][1]*s.m[1][1]+t.m[2][2]*s.m[2][1]+t.m[2][3]*s.m[3][1],t.m[2][0]*s.m[0][2]+t.m[2][1]*s.m[1][2]+t.m[2][2]*s.m[2][2]+t.m[2][3]*s.m[3][2],t.m[2][0]*s.m[0][3]+t.m[2][1]*s.m[1][3]+t.m[2][2]*s.m[2][3]+t.m[2][3]*s.m[3][3]],[t.m[3][0]*s.m[0][0]+t.m[3][1]*s.m[1][0]+t.m[3][2]*s.m[2][0]+t.m[3][3]*s.m[3][0],t.m[3][0]*s.m[0][1]+t.m[3][1]*s.m[1][1]+t.m[3][2]*s.m[2][1]+t.m[3][3]*s.m[3][1],t.m[3][0]*s.m[0][2]+t.m[3][1]*s.m[1][2]+t.m[3][2]*s.m[2][2]+t.m[3][3]*s.m[3][2],t.m[3][0]*s.m[0][3]+t.m[3][1]*s.m[1][3]+t.m[3][2]*s.m[2][3]+t.m[3][3]*s.m[3][3]]],this}pointTransform(t){return m(t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0]+this.m[3][0],t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1]+this.m[3][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2])}rotateX(t){const s=t*Math.PI/180;return this.m[1][1]=this.m[2][2]=Math.cos(s),this.m[1][2]=Math.sin(s),this.m[2][1]=-this.m[1][2],this}rotateY(t){const s=t*Math.PI/180;return this.m[0][0]=this.m[2][2]=Math.cos(s),this.m[2][0]=Math.sin(s),this.m[0][2]=-this.m[2][0],this}rotateZ(t){const s=t*Math.PI/180;return this.m[0][0]=this.m[1][1]=Math.cos(s),this.m[0][1]=Math.sin(s),this.m[1][0]=-this.m[0][1],this}toArrayM(){return[this.m[0][0],this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][2],this.m[3][3]]}ortho(t,s,i,e,r,m){return this.m=[[2/(s-t),0,0,0],[0,2/(e-i),0,0],[0,0,-2/(m-r),0],[-(s+t)/(s-t),-(e+i)/(e-i),-(m+r)/(m-r),1]],this}}function e(...t){return new i(...t)}class r{x;y;z;constructor(t,s,i){"object"==typeof t?(this.x=t.x,this.y=t.y,this.z=t.z):null!=t&&null==s&&null==i?(this.x=t,this.y=t,this.z=t):null!=t&&null!=s&&null!=i?(this.x=t,this.y=s,this.z=i):(this.x=0,this.y=0,this.z=0)}set(t,s,i){return null!=t&&null!=s&&null!=i&&(this.x=t,this.y=s,this.z=i),this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}mul(t){return this.x*=t,this.y*=t,this.z*=t,this}div(t){return 0==t?this.mul(0):(this.x/=t,this.y/=t,this.z/=t),this}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){return Math.sqrt(this.len2())}negate(){return this.x*=-1,this.y*=-1,this.z*=-1,this}norm(){return this.div(this.len())}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return this.set(this.y*t.z-this.z*t.y,-this.x*t.z+this.z*t.x,this.x*t.y-this.y*t.x)}toArrayV(){return[this.x,this.y,this.z]}toArray4(){return[this.x,this.y,this.z,0]}}function m(...t){return new r(...t)}class h{canva;mx;my;mdx;mdy;mdz;mButton;keysDown;constructor(t){this.mdx,this.mdy,this.mdz,this.canva=t,t.addEventListener("wheel",this.mWheel,!1),t.addEventListener("mousemove",this.mMove,!1),window.addEventListener("keydown",this.keyDown,!1)}mWheel=t=>{this.mdz=t.deltaY};mMove=t=>{this.mButton=t.buttons,this.mdx=t.movementX,this.mdy=t.movementY,this.mx=t.offsetX,this.my=t.offsetY};keyDown=t=>{this.keysDown=t.code};reset(){this.mButton=this.keysDown=void 0,this.mdx=this.mdy=this.mdz=0}}class a{bindPoint;bufId;type;size;constructor(t,s,i){this.bufId=t.createBuffer(),this.type=s,t.bindBuffer(this.type,this.bufId),"number"==typeof i?(this.size=i,t.bufferData(this.type,i,t.STATIC_DRAW)):(this.size=i.length,t.bufferData(this.type,i,t.STATIC_DRAW))}update(t,s){t.bindBuffer(this.type,this.bufId),t.bufferData(this.type,s,t.STATIC_DRAW)}apply(t){t.bindBuffer(this.type,this.bufId)}}class n extends a{bindPoint;uBlockName;constructor(t,s,i,e){super(t,t.UNIFORM_BUFFER,s),this.bindPoint=i,this.uBlockName=e}apply(t,s,i){i<t.MAX_UNIFORM_BUFFER_BINDINGS&&t.uniformBlockBinding(s,i,this.bindPoint),t.bindBufferBase(t.UNIFORM_BUFFER,this.bindPoint,this.bufId)}}function o(...t){return new a(...t)}function l(...t){return new n(...t)}class u{gl;name;mtlPat;tex=[];shd;ubo=[];constructor(t,s,i,e,r,m=null){this.name=s,this.gl=t,this.mtlPat=i;let h=[],a=c(e);i.mForm.args.forEach((t=>{if(""===t.name)for(let s=0;s<t.size;s++)h.push(-1);else for(let s=0;s<a.args.length;s++){let i=a.args[s];if(i.name===t.name){i.args.length!=t.size&&alert("mtl pat len arg not mtl data len");for(let s=0;s<t.size;s++)h.push(Number(i.args[s]));break}}})),this.ubo[0]=l(t,64,0,"Matrix"),this.ubo[1]=l(t,h,1,"material"),this.ubo[2]=m,this.shd=function(...t){return new g(...t)}(t,i.shdPass)}apply(){this.shd.apply(this.gl)}}function c(t){let s={},i=(t=t.replace(/ /g,"")).split("),");return s.len=i.length,s.args=[],i.forEach(((t,i)=>{let e={},r=t.split("(");e.name=r[0],e.args=r[1].replace(")","").split(","),"f"===e.args[0][0]&&(e.size=Number(e.args[0].replace("f",""))),s.args.push(e)})),s}class d{name;vForm;vFormAllSize=0;mForm;mFormAllSize;shdPass;noofTex;constructor(t,s,i,e){this.shdPass=i,this.noofTex=e,this.vForm=c(t);for(let t=0;t<this.vForm.len&&null!=this.vForm.args[t].size;t++)this.vFormAllSize+=this.vForm.args[t].size;this.mForm=c(s);for(let t=0;t<this.mForm.len&&null!=this.mForm.args[t].size;t++)this.mFormAllSize+=this.mForm.args[t].size}}function f(t,s,i){const e=t.createShader(s);if(t.shaderSource(e,i),t.compileShader(e),!t.getShaderParameter(e,t.COMPILE_STATUS)){const s=t.getShaderInfoLog(e);console.log(s),alert("!?!??!?!")}return e}class g{pass;program;attrs=[];uniforms=[];uniformBlocks=[];constructor(t,s){this.program=new Promise(((i,e)=>{const r=x(s+"/vert.glsl"),m=x(s+"/frag.glsl");Promise.all([r,m]).then((s=>{const r=f(t,t.VERTEX_SHADER,s[0]),m=f(t,t.FRAGMENT_SHADER,s[1]);if(this.program=t.createProgram(),t.attachShader(this.program,r),t.attachShader(this.program,m),t.linkProgram(this.program),t.getProgramParameter(this.program,t.LINK_STATUS))this.getInfo(t);else{const s=t.getProgramInfoLog(this.program);e(s)}i(this.program)}))})),this.gl=t,this.pass=s}loadPos(t,s,i){const e=this.gl;t.numOfV=null==i||null==i?s.length/3:i.length,t.VA=e.createVertexArray(),e.bindVertexArray(t.VA),t.VB=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,t.VB),e.bufferData(e.ARRAY_BUFFER,new Float32Array(s),e.STATIC_DRAW),null!=i&&(t.IB=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.IB),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW))}apply(t){t.useProgram(this.program)}getInfo(t){let s=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let i=0;i<s;i++){const s=t.getActiveAttrib(this.program,i);this.attrs[s.name]={name:s.name,type:s.type,size:s.size,loc:t.getAttribLocation(this.program,s.name)}}let i=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let s=0;s<i;s++){const i=t.getActiveUniform(this.program,s);this.uniforms[i.name]={name:i.name,type:i.type,size:i.size,loc:t.getUniformLocation(this.program,i.name)}}let e=t.getProgramParameter(this.program,t.ACTIVE_UNIFORM_BLOCKS);for(let s=0;s<e;s++){const i=t.getActiveUniformBlockName(this.program,s),e=t.getUniformBlockIndex(this.program,i);this.uniformBlocks[i]={name:i,index:e,size:t.getActiveUniformBlockParameter(this.program,e,t.UNIFORM_BLOCK_DATA_SIZE),bind:t.getActiveUniformBlockParameter(this.program,e,t.UNIFORM_BLOCK_BINDING)}}}}class p{projSize;projDist;projFarClip;matrVP;matrView;matrProj;loc;at;dir;up;right;frameW;frameH;constructor(t){this.frameW=t.drawingBufferWidth,this.frameH=t.drawingBufferHeight,this.matrVP=e(),this.matrView=e(),this.matrProj=e(),this.loc=m(),this.at=m(),this.dir=m(),this.up=m(),this.right=m(),this.setProj(.5,.5,100),this.set(m(0,3,3),m(0),m(0,1,0))}set(t,s,i){this.matrView.view(t,s,i),this.matrVP.matrMulmatr(this.matrView,this.matrProj),this.loc=t,this.at=s,this.up=i,this.dir.set(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.up.set(-this.matrView.m[0][1],-this.matrView.m[1][1],-this.matrView.m[2][1]),this.right.set(-this.matrView.m[0][0],-this.matrView.m[1][0],-this.matrView.m[2][0])}setProj(t,s,i){let e,r;e=r=t,this.projDist=s,this.projSize=t,this.projFarClip=i,this.frameW>this.frameH?e*=this.frameW/this.frameH:r*=this.frameH/this.frameW,this.matrProj.frustum(-e/2,e/2,-r/2,r/2,s,i),this.matrVP.matrMulmatr(this.matrView,this.matrProj)}setSize(t,s){this.frameW=t,this.frameH=s,this.setProj(this.projSize,this.projDist,this.projFarClip)}update(t,s){if(null==t.keysDown&&0==t.mdx&&0==t.mdy&&0==t.mdz)return;let i=s.globalDeltaTime,r=m(this.at).sub(this.loc).len(),h=(this.loc.y-this.at.y)/r,a=Math.sqrt(1-h*h),n=r*a,o=(this.loc.z-this.at.z)/n,l=(this.loc.x-this.at.x)/n,u=180/Math.PI*Math.atan2(l,o),c=180/Math.PI*Math.atan2(a,h),d=this.projSize,f=this.projSize,g=(r-1)*(r-1)/(18*r),p=0,y=0,w=m();u+=1*i*-10*(500*(2==t.mButton)*t.mdx/(1+this.frameW)*2+(("ArrowLeft"==t.keysDown)-("ArrowRight"==t.keysDown)))*(15+45*("ShiftLeft"==t.keysDown)),c+=1*i*-10*(500*(2==t.mButton)*t.mdy/(1+this.frameH))*2+(("ArrowUp"==t.keysDown)-("ArrowDown"==t.keysDown))*(15+45*("ShiftLeft"==t.keysDown)),c=Math.min(179.9,c),c=Math.max(.1,c),r+=i*g*(-t.mdz*(1+25*("ShiftLeft"==t.keysDown))+(8+25*("keysDown"==t.keysDown))*(("ArrowUp"==t.keysDown)-("ArrowDown"==t.keysDown))),r=Math.max(r,1.1),r=Math.min(r,10*this.projFarClip),this.frameW>this.frameH?d*=this.frameW/this.frameH:f*=this.frameH/this.frameW,p=(1==t.mButton)*-t.mdx*d/this.frameW*r/this.projDist,y=(1==t.mButton)*t.mdy*f/this.frameH*r/this.projDist,w=m(this.right).mul(p).add(m(this.up).mul(y)),this.at.add(w),this.loc.add(w),"KeyF"!=t.keysClick?("KeyP"==t.keysClick&&(s.isPause=!s.isPause),this.set(e().matrMulmatr(e().rotateX(c),e().rotateX(u),e().translate(this.at)).pointTransform(m(0,r,0)),this.at,m(0,1,0))):this.camSet(m(20),m(0),m(0,1,0))}}function y(t){var s=t.VB,i=t.V,e=t.I,r=t.N,h=t.C;!function(t,s,i){for(let s=0;s<t.length;s++)i.push(m(0));for(let r=0;r<s.length-2;r+=3){const h=m(t[s[r]].x,t[s[r]].y,t[s[r]].z),a=m(t[s[r+1]].x,t[s[r+1]].y,t[s[r+1]].z),n=m(t[s[r+2]].x,t[s[r+2]].y,t[s[r+2]].z);var e=a.sub(h).cross(n.sub(h)).norm();i[s[r]].add(e),i[s[r+1]].add(e),i[s[r+2]].add(e)}for(let t=0;t<i.length;t++)i[t]=i[t].norm()}(i,e,r);for(let t=0;t<i.length;t++)s.push(...i[t].add(h).toArrayV(),...r[t].toArrayV())}let w=[];w.P=["in_pos","Position"],w.N=["in_norm","Normal"],w.T=["in_tex","Texture"],w.C=["in_color","Color"];class A{isCreated;isDelete;isDraw;type;mTrans;mtl;VA;VB;IB;numOfV;create(t,s,i,e,r){this.isCreated=!1,this.isDelete=!1,this.isDraw=!1,this.type="triangle strip"==s?t.TRIANGLE_STRIP:"triangle"==s?t.TRIANGLES:t.POINTS,this.mtl=r,typeof r.shd.program.then==typeof Promise?r.shd.program.then((()=>{this.loadV(t,i,e,r),this.isCreated=!0})):(this.loadV(t,i,e,r),this.isCreated=!0)}draw(t){this.isDraw=!0,this.mTrans=t}del(){1!=this.isCreated&&(this.isDelete=!1)}loadV(t,s,i,e){this.numOfV=null==i||null==i?s.length/3:i.length,this.VA=t.createVertexArray(),t.bindVertexArray(this.VA),this.VB=o(t,t.ARRAY_BUFFER,new Float32Array(s)),null!=i&&null!=i&&(this.IB=o(t,t.ELEMENT_ARRAY_BUFFER,new Int16Array(i)));let r=0;for(let s=0;s<e.mtlPat.vForm.len;s++)for(let i=0;i<w[e.mtlPat.vForm.args[s].name].length;i++){const m=w[e.mtlPat.vForm.args[s].name][i];if(null!=e.shd.attrs[m]){const i=e.shd.attrs[m].loc;t.vertexAttribPointer(i,e.mtlPat.vForm.args[s].size,t.FLOAT,!1,4*e.mtlPat.vFormAllSize,r),r+=4*e.mtlPat.vForm.args[s].size,t.enableVertexAttribArray(i);break}alert("_shader have no pos but _materialPat have")}}objLoad(t,s,i,e){return x(s).then((s=>{if(null==s||null==s||""==s)return;const r=s.replace("\r").split("\n"),h=[],a=[];let n=0;for(let t=0;t<r.length;t++)"f "===r[t].slice(0,2)&&n++;for(let t=0;t<r.length;t++)if("v "===r[t].slice(0,2)){let s=r[t].split(" ");h.push(m(Number(s[1]),Number(s[2]),Number(s[3])))}else if("f "===r[t].slice(0,2)){let s=r[t].split(" ");for(let t=1;t<s.length;t++){let i=Number(s[t].split("//")[0]);i>0?a.push(i-1):a.push(n+i)}}var o={V:h,I:a,VB:[],N:[],C:m(0)};y(o),this.create(t,i,o.VB,o.I,e)}))}}function P(...t){return new A(...t)}class T{static allPrims=[];gl;timer;camera;input;constructor(t){this.gl=t.gl,this.camera=function(...t){return new p(...t)}(t.gl),this.timer=function(...t){return new z(...t)}(),this.input=function(...t){return new h(...t)}(t.canvas),this.colorSet(.3,.47,.8,1)}mtlpatCreate(...t){return function(...t){return new d(...t)}(...t)}mtlCreate(...t){return function(...t){return new u(...t)}(this.gl,...t)}primCreate(t,s,i,e){const r=P.create(this.gl,t,s,i,e);return T.allPrims.push(r),r}colorSet(t,s,i,e){this.gl.clearColor(t,s,i,e)}start(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)}prim(){const t=P();return T.allPrims.push(t),t}primDraw(t){t.mtl.apply(this.camera,this.timer),t.mtl.ubo[0].update(this.gl,new Float32Array([...e().matrMulmatr(t.mTrans,this.camera.matrVP).toArrayM(),...this.camera.matrVP.toArrayM(),...e().ortho(-1,1,-1,1,-1,1).toArrayM(),...this.camera.loc.toArray4(),...this.camera.at.toArray4(),...this.camera.up.toArray4(),...this.camera.right.toArray4(),this.timer,0,0,0])),t.mtl.ubo[0].apply(this.gl,t.mtl.shd.program,0),this.gl.bindVertexArray(t.VA),null!=t.IB?(t.IB.apply(this.gl),this.gl.drawElements(t.type,t.numOfV,this.gl.UNSIGNED_SHORT,0)):this.gl.drawArrays(t.type,0,t.numOfV)}end(){this.timer.response("fps"),T.allPrims.forEach(((t,s)=>{!0===t.isDraw&&!1===t.isDelete&&!0===t.isCreated?this.primDraw(t):!0===t.isDelete&&!0===t.isCreated&&this.allPrims.splice(s,1)}))}}function F(){const t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()}class z{globalTime;localTime;globalDeltaTime;localDeltaTime;startTime;oldTime;oldTimeFPS;frameCounter;isPause;FPS;pauseTime;constructor(){this.globalTime=this.localTime=F(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0}response=(t=null)=>{let s=F();this.globalTime=s,this.globalDeltaTime=s-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=s-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=s-this.pauseTime-this.startTime),this.frameCounter++,s-this.oldTimeFPS>.5&&(this.FPS=this.frameCounter/(s-this.oldTimeFPS),this.oldTimeFPS=s,this.frameCounter=0,null!=t&&(document.getElementById(t).innerHTML=this.getFPS())),this.oldTime=s};getFPS=()=>this.FPS.toFixed(3)}async function x(t){const s=await fetch(t);return await s.text()}class b{drawContext;render;constructor(t){this.drawContext=function(...t){return new s(...t)}(t),this.render=function(...t){return new T(...t)}(this.drawContext)}}function B(...t){return new b(...t)}window.addEventListener("load",(()=>{let t=B("glCanvas"),s=t.render.mtlpatCreate("P(f3), N(f3)","Ka(f3), Kd(f3), Ks(f3), Ph(f1)","./shaders/3d",0),i=t.render.mtlCreate("mtl_name",s,"Ka(1, 1, 1), Ks(3, 3, 1), Kd(1.6, 10, 1), Ph(30)"),r=t.render.prim();r.objLoad(t.render.gl,"./bin/cow.object","triangle",i).then((()=>{r.draw(e())})).catch((t=>{console.log(t)}));let h=m(30,20,0);const a=()=>{r.draw(e()),t.render.camera.set(h,m(0),m(0,1,0)),t.render.start(),t.render.end(),window.requestAnimationFrame(a)};a()})),t._system=b,t.system=B}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
